#+STARTUP: overview indent
#+title: Vod's Doom Emacs Config
#+email: vod@njk.li
#+author: VOD
#+options: H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t pri:t
#+tags: GTD(G) writing(w) export(e) manage(m) graphical(g) nix(n)

- [[https://www.gtrun.org/custom/config.html][My Doom Emacs config]]

* Init.el

#+begin_src emacs-lisp :tag init-el :tangle "init.el"
  ;;; init.el -*- lexical-binding: t; -*-

  ;; This file controls what Doom modules are enabled and what order they load
  ;; in. Remember to run 'doom sync' after modifying it!

  ;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
  ;;      documentation. There you'll find a "Module Index" link where you'll find
  ;;      a comprehensive list of Doom's modules and what flags they support.

  ;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
  ;;      'C-c c k' for non-vim users) to view its documentation. This works on
  ;;      flags as well (those symbols that start with a plus).
  ;;
  ;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
  ;;      directory (for easy access to its source code).

  (doom! :input
         ;; chinese
         ;;japanese
         ;;layout            ; auie,ctsrnm is the superior home row

         :completion
         company            ; the ultimate code completion backend
         (helm
          +fuzzy)              ; the *other* search engine for love and life
         ;;ido               ; the other *other* search engine...
         ;;ivy               ; a search engine for love and life
         ;;vertico           ; the search engine of the future

         :ui
         deft              ; notational velocity for Emacs
         doom              ; what makes DOOM look the way it does
         doom-dashboard    ; a nifty splash screen for Emacs
         ;; doom-quit         ; DOOM quit-message prompts when you quit Emacs
         ;;(emoji +unicode)  ; 🙂
         hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
         ;;hydra
         ;; indent-guides     ; highlighted indent columns
         ;;ligatures         ; ligatures and symbols to make your code pretty again
         minimap           ; show a map of the code on the side
         modeline          ; snazzy, Atom-inspired modeline, plus API
         nav-flash         ; blink cursor line after big motions
         ;; neotree           ; a project drawer, like NERDTree for vim
         (treemacs +lsp) ; a project drawer, like neotree but cooler
         ophints           ; highlight the region an operation acts on
         (popup +all +defaults)   ; tame sudden yet inevitable temporary windows
         ;;tabs              ; a tab bar for Emacs
         ;; unicode           ; extended unicode support for various languages
         vc-gutter         ; vcs diff in the fringe
         ;; vi-tilde-fringe   ; fringe tildes to mark beyond EOB
         window-select     ; visually switch windows
         workspaces        ; tab emulation, persistence & separate workspaces
         ;;zen               ; distraction-free coding or writing

         :editor
         ;;(evil +everywhere); come to the dark side, we have cookies
         file-templates    ; auto-snippets for empty files
         fold              ; (nigh) universal code folding
         ;;(format +onsave)  ; automated prettiness
         ;;god               ; run Emacs commands without modifier keys
         ;;lispy             ; vim for lisp, for people who don't like vim
         multiple-cursors  ; editing in many places at once
         ;;objed             ; text object editing for the innocent
         ;;parinfer          ; turn lisp into python, sort of
         rotate-text       ; cycle region at point between text candidates
         snippets          ; my elves. They type so I don't have to
         word-wrap         ; soft wrapping with language-aware indent

         :emacs
         (dired +icons)             ; making dired pretty [functional]
         electric          ; smarter, keyword-based electric-indent
         (ibuffer :config
                  ibuffer-group-buffers-by 'projects) ; interactive buffer management
         (undo +tree)      ; persistent, smarter undo for your inevitable mistakes
         vc                ; version-control and Emacs, sitting in a tree

         :term
         eshell            ; the elisp shell that works everywhere
         ;;shell             ; simple shell REPL for Emacs
         ;;term              ; basic terminal emulator for Emacs
         ;; vterm             ; the best terminal emulation in Emacs

         :checkers
         syntax              ; tasing you for every semicolon you forget
         (spell +flyspell
                +everywhere) ; tasing you for misspelling mispelling
         grammar           ; tasing grammar mistake every you make

         :tools
         ;;ansible
         debugger          ; FIXME stepping through code, to help you add bugs
         direnv
         (docker +lsp)
         editorconfig      ; let someone else argue about tabs vs spaces
         ;;ein               ; tame Jupyter notebooks with emacs
         (eval +overlay)     ; run code, run (also, repls)
         gist              ; interacting with github gists
         lookup              ; navigate your code and its documentation
         (lsp +peek)               ; M-x vscode
         (magit +forge)             ; a git porcelain for Emacs
         make              ; run make tasks from Emacs
         (pass +auth)              ; password manager for nerds
         pdf               ; pdf enhancements
         ;;prodigy           ; FIXME managing external services & code builders
         rgb               ; creating color strings
         ;;taskrunner        ; taskrunner for all your projects
         ;;terraform         ; infrastructure as code
         ;;tmux              ; an API for interacting with tmux
         upload            ; map local to remote projects via ssh/ftp

         :os
         (:if IS-MAC macos)  ; improve compatibility with macOS
         ;;tty               ; improve the terminal Emacs experience

         :lang
         ;;agda              ; types of types of types of types...
         ;;beancount         ; mind the GAAP
         ;;cc                ; C > C++ == 1
         ;;clojure           ; java with a lisp
         common-lisp       ; if you've seen one lisp, you've seen them all
         ;;coq               ; proofs-as-programs
         crystal           ; ruby at the speed of c
         ;;csharp            ; unity, .NET, and mono shenanigans
         data              ; config/data formats
         ;;(dart +flutter)   ; paint ui and not much else
         ;;dhall
         ;;elixir            ; erlang done right
         ;;elm               ; care for a cup of TEA?
         emacs-lisp        ; drown in parentheses
         ;;erlang            ; an elegant language for a more civilized age
         ;;ess               ; emacs speaks statistics
         ;;factor
         ;;faust             ; dsp, but you get to keep your soul
         ;;fsharp            ; ML stands for Microsoft's Language
         ;;fstar             ; (dependent) types and (monadic) effects and Z3
         ;;gdscript          ; the language you waited for
         ;;(go +lsp)         ; the hipster dialect
         ;;(haskell +lsp)    ; a language that's lazier than I am
         ;;hy                ; readability of scheme w/ speed of python
         ;;idris             ; a language you can depend on
         (json
          +lsp)              ; At least it ain't XML
         ;;(java +meghanada) ; the poster child for carpal tunnel syndrome
         ;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
         ;;julia             ; a better, faster MATLAB
         ;;kotlin            ; a better, slicker Java(Script)
         (latex +lsp)             ; writing papers in Emacs has never been so fun
         ;;lean              ; for folks with too much to prove
         ;;ledger            ; be audit you can be
         ;;lua               ; one-based indices? one-based indices
         (markdown +grip)          ; writing docs for people to ignore
         ;;nim               ; python + lisp at the speed of c
         (nix +lsp)               ; I hereby declare "nix geht mehr!"
         ;;ocaml             ; an objective camel
         (org
          +dragndrop
          +gnuplot
          +pandoc
          +journal
          ;; +roam2
          +noter
          )
                 ; organize your plain life in plain text
         ;;php               ; perl's insecure younger brother
         plantuml          ; diagrams for confusing people more
         ;;purescript        ; javascript, but functional
         ;; (python
         ;;  +poetry
         ;;  +lsp
         ;;  +pyright)            ; beautiful is better than ugly
         ;;qt                ; the 'cutest' gui framework ever
         ;;racket            ; a DSL for DSLs
         ;;raku              ; the artist formerly known as perl6
         rest              ; Emacs as a REST client
         ;;rst               ; ReST in peace
         (ruby +rails
               +lsp)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
         ;; (rust
         ;;  +lsp) ;Fe2O3.unwrap().unwrap().unwrap().unwrap()
         ;;scala             ; java, but good
         ;;(scheme +guile)   ; a fully conniving family of lisps
         (sh +lsp)                ; she sells {ba,z,fi}sh shells on the C xor
         ;;sml
         ;;solidity          ; do you need a blockchain? No.
         ;;swift             ; who asked for emoji variables?
         ;;terra             ; Earth and Moon in alignment for performance.
         (web +lsp)               ; the tubes
         (yaml +lsp)              ; JSON, but readable
         ;;zig               ; C, but simpler

         :email
         ;;(mu4e +org +gmail)
         ;;notmuch
         ;;(wanderlust +gmail)

         :app
         calendar
         ;;emms
         everywhere        ; *leave* Emacs!? You must be joking
         irc               ; how neckbeards socialize
         ;;(rss +org)        ; emacs as an RSS reader
         ;;twitter           ; twitter client https://twitter.com/vnought

         :config
         literate
         (default
           +bindings
           +smartparens)
         :private
         spacemacs-default
         ;; BROKEN: (nix +lsp)

         ;; my-org
         ;; my-code
         )
#+end_src

#+RESULTS:

* Packages.el

#+begin_src emacs-lisp :tangle "packages.el"
;;; packages.el -*- lexical-binding: t; -*-
#+end_src

** TODO Fix frames/workspaces behaviour

This helps, remember to C-x #

#+begin_src emacs-lisp :tangle config.el
(after! persp-mode
  (setq persp-emacsclient-init-frame-behaviour-override "main"))
#+end_src

This didn't work either!

#+begin_src emacs-lisp :tangle packages.el
(package! burly)
#+end_src

#+begin_src emacs-lisp :tangle config.el
(use-package! burly)
#+end_src

** discover

#+begin_src emacs-lisp :tangle "packages.el"
;;; packages.el -*- lexical-binding: t; -*-
(package! discover :recipe (:host github :repo "mickeynp/discover.el"))
;; (package! berrys-theme)
#+end_src

** hl-todo

#+begin_src emacs-lisp :tangle config.el
(setq hl-todo-keyword-faces
      `(;; For things that need to be done, just not today.
        ("TODO" warning bold)
        ;; For problems that will become bigger problems later if not
        ;; fixed ASAP.
        ("FIXME" error bold)
        ;; Most of code is shite, especially on github
        ;; Stale PRs and other crap we can't always influence directly
        ("ISSUE" warning bold)
        ;; For tidbits that are unconventional and not intended uses of the
        ;; constituent parts, and may break in a future update.
        ("HACK" font-lock-constant-face bold)
        ;; For things that were done hastily and/or hasn't been thoroughly
        ;; tested. It may not even be necessary!
        ("REVIEW" font-lock-keyword-face bold)
        ;; For especially important gotchas with a given implementation,
        ;; directed at another user other than the author.
        ("NOTE" success bold)
        ;; For things that just gotta go and will soon be gone.
        ("DEPRECATED" font-lock-doc-face bold)
        ;; For a known bug that needs a workaround
        ("BUG" error bold)
        ;; For warning about a problematic or misguiding code
        ("XXX" font-lock-constant-face bold)))

#+end_src

** Rainbow delimiters

#+begin_src emacs-lisp :tangle packages.el
(package! rainbow-delimiters :recipe (:host github :repo "Civitasv/rainbow-delimiters"))
#+end_src

#+begin_src emacs-lisp :tangle config.el
(use-package! rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** TODO deft

#+begin_src emacs-lisp :tangle config.el

#+end_src

** gpg
[[https://www.gnu.org/software/emacs/manual/html_mono/epa.html][Reference]]
#+begin_src emacs-lisp :tangle config.el
(use-package! org-crypt
  :config
  (org-crypt-use-before-save-magic)
  (setq org-crypt-key "E203A151BB3FD1AE"
        epa-file-encrypt-to "vod@njk.li"
        org-tags-exclude-from-inheritance (quote ("crypt"))))
#+end_src

** TODO autosave

# +begin_src emacs-lisp
     ;;(use-package! auto-save
     ;;              :config
     ;;              (auto-save-enable)
     ;;              (setq auto-save-silent t)   ; quietly save
     ;;              ;; after foraml-buffer
     ;;              (setq auto-save-idle 5)
     ;;              (setq auto-save-delete-trailing-whitespace t)  ; automatically delete spaces at the end of the line when saving
     ;;              ;; custom predicates if you don't want auto save.
     ;;              ;; disable auto save mode when current filetype is an gpg file.
     ;;              (setq auto-save-disable-predicates
     ;;                    '((lambda ()
     ;;                        (string-suffix-p
     ;;                         "gpg"
     ;;                         (file-name-extension (buffer-name)) t))))
     ;;              )
# +end_src

** Helm - finetune the doom provided stuff
A nice start here - https://github.com/thierryvolpiatto/emacs-config/blob/main/init-helm.el

#+begin_src emacs-lisp :tangle packages.el
(package! helm-rg)
(package! helm-swoop)
;;(package! helm-locate)
#+end_src

#+begin_src emacs-lisp :tangle config.el
(after! helm-mode
  (customize-set-variable helm-completion-style 'helm-fuzzy))

(use-package! helm-swoop)
(use-package! helm-rg)
(use-package! helm-locate
  :config (setq helm-locate-fuzzy-match t))
#+end_src

#+begin_src emacs-lisp :tangle "packages.el"
(package! helm-tramp)
#+end_src

#+begin_src emacs-lisp :tangle "config.el"
(use-package! helm-tramp
  :config
  (setq tramp-default-method "ssh"
        make-backup-files nil
        create-lockfiles nil
        helm-tramp-custom-connections '(/ssh:admin@frogstar.0.njk.li:/home/admin/))
)
#+end_src

** vlf
   Perhaps a better option is [[https://github.com/m00natic/vlfi][vlfi]] - it seems a bit newer

#+begin_src emacs-lisp :tangle "packages.el"
(package! vlf)
#+end_src

#+begin_src emacs-lisp :tangle "config.el"
(use-package! vlf
  :config
  (require 'vlf-setup)
  (custom-set-variables
   '(vlf-application 'dont-ask))
)
#+end_src

** Hydra

- https://github.com/abo-abo/hydra/wiki/Projectile

** imenu-list

#+begin_src emacs-lisp :tangle "packages.el"
(package! imenu-list)
#+end_src

#+begin_src emacs-lisp :tangle "config.el"
(use-package! imenu-list
  :config
  (setq imenu-list-auto-resize t)
  (setq imenu-list-focus-after-activation t)
  (setq imenu-list-after-jump-hook nil)
  (add-hook 'menu-list-after-jump-hook #'recenter-top-bottom)
)
#+end_src

** w3m

#+begin_src emacs-lisp :tangle "packages.el"
(package! w3m)
#+end_src

#+begin_src emacs-lisp :tangle "config.el"
(use-package! w3m
  :commands (w3m)
  :config
  (setq w3m-use-tab-line nil)
)
#+end_src

** ein

#+begin_src emacs-lisp :tangle "packages.el"
  ;; (package! ein :recipe (:host github
  ;;                        :repo "millejoh/emacs-ipython-notebook"
  ;;                        :files ("lisp/*.el")
  ;;                        :build (:not compile)))
#+end_src

#+begin_src emacs-lisp :tangle "config.el"
  ;; (use-package! ein
  ;;   :config
  ;;   (setq ob-ein-languages
  ;;    (quote
  ;;     (("ein-python" . python)
  ;;      ("ein-R" . R)
  ;;      ("ein-r" . R)
  ;;      ("ein-rust" . rust)
  ;;      ("ein-haskell" . haskell)
  ;;      ("ein-julia" . julia))))
  ;;   )

  ;; (after! ein:ipynb-mode                  ;
  ;;   (poly-ein-mode 1)
  ;;   (hungry-delete-mode -1)
  ;;   )
#+end_src

** undo-fu

- [[https://gitlab.com/ideasman42/emacs-undo-fu-session][ideasman42 / emacs-undo-fu-session · GitLab]]
- [[https://gitlab.com/ideasman42/emacs-undo-fu][ideasman42 / emacs-undo-fu · GitLab]]

#+begin_src emacs-lisp :tangle "config.el"
  ;; (use-package! undo-fu
  ;;   :config
  ;;   ;; Store more undo history to prevent loss of data
  ;;   (setq undo-limit 400000
  ;;         undo-strong-limit 3000000
  ;;         undo-outer-limit 3000000)

  ;;   (define-minor-mode undo-fu-mode
  ;;     "Enables `undo-fu' for the current session."
  ;;     :keymap (let ((map (make-sparse-keymap)))
  ;;               (define-key map [remap undo] #'undo-fu-only-undo)
  ;;               (define-key map [remap redo] #'undo-fu-only-redo)
  ;;               (define-key map (kbd "C-_")     #'undo-fu-only-undo)
  ;;               (define-key map (kbd "M-_")     #'undo-fu-only-redo)
  ;;               (define-key map (kbd "C-M-_")   #'undo-fu-only-redo-all)
  ;;               (define-key map (kbd "C-x r u") #'undo-fu-session-save)
  ;;               (define-key map (kbd "C-x r U") #'undo-fu-session-recover)
  ;;               map)
  ;;     :init-value nil
  ;;     :global t)
  ;; )
#+end_src

** vundo
- Note: vundo.el requires Emacs 28.

#+begin_src emacs-lisp :tangle "packages.el"
;; (package! vundo :recipe (:host github :repo "casouri/vundo"))
#+end_src

#+begin_src emacs-lisp :tangle "config.el"
;; (use-package! vundo)
#+end_src

** color-rg

#+begin_src emacs-lisp :tangle "packages.el"
(package! color-rg :recipe (:host github :repo "manateelazycat/color-rg"))
#+end_src

#+begin_src emacs-lisp :tangle "config.el"
(use-package! color-rg
  :commands (color-rg-search-input color-rg-search-symbol
                                   color-rg-search-input-in-project
                                   )
  :bind
  (:map isearch-mode-map
   ("M-s M-s" . isearch-toggle-color-rg))
  )
#+end_src

** TODO snails

#+begin_src emacs-lisp :tangle "packages.el"
  ;;(package! snails :recipe (:host github
  ;;                        :repo "manateelazycat/snails"
  ;;                      :files ("*.el")))
#+end_src

#+begin_src emacs-lisp :tangle "config.el"
;;(use-package! snails
;;  :config
;;  (setq snails-show-with-frame nil)
;;  (define-key snails-mode-map [remap previous-line] #'snails-select-prev-item)
;;  (define-key snails-mode-map [remap next-line] #'snails-select-next-item)
;;  )
#+end_src

** iscroll

#+begin_src emacs-lisp :tangle "packages.el"
(package! iscroll :recipe (:host github
                                 :repo "casouri/iscroll"))
#+end_src

#+begin_src emacs-lisp :tangle "config.el"
(use-package! iscroll
  :config
  (add-hook! 'org-mode-hook 'iscroll-mode)
  )
#+end_src

** fd-dired

#+begin_src emacs-lisp :tangle "packages.el"
(package! fd-dired :recipe (:host github
                                 :repo "yqrashawn/fd-dired"))
#+end_src

#+begin_src emacs-lisp :tangle "config.el"
(use-package! fd-dired)
#+end_src

** find-dupes-dired
#+begin_src emacs-lisp :tangle "packages.el"
(package! find-dupes-dired :recipe (:host github
                                 :repo "ShuguangSun/find-dupes-dired"))
#+end_src

#+begin_src emacs-lisp :tangle "config.el"
(use-package! find-dupes-dired)
#+end_src

** dogears.el
#+begin_src emacs-lisp :tangle "packages.el"
(package! dogears :recipe (:host github
                                 :repo "alphapapa/dogears.el"))
#+end_src

#+begin_src emacs-lisp :tangle "config.el"
(use-package! dogears
:hook (text-mode . dogears-mode)
:config
  :bind (:map global-map
              ("M-g d" . dogears-go)
              ("M-g M-b" . dogears-back)
              ("M-g M-f" . dogears-forward)
              ("M-g M-d" . dogears-list)
              ("M-g M-D" . dogears-sidebar)))
#+end_src

** consult-dir
** session-async.el

- https://codeberg.org/FelipeLema/session-async.el

#+begin_src emacs-lisp :tangle "packages.el"
(package! session-async :recipe (:host nil
                                 :repo "https://codeberg.org/FelipeLema/session-async.el.git"
                                 :files ("*")))
#+end_src

#+begin_src emacs-lisp :tangle "config.el"
(use-package! session-async)
#+end_src

** Sly

#+begin_src emacs-lisp :tangle "config.el"
(use-package! sly
  :init (setq sly-ignore-protocol-mismatches t
              sly-compile-file-options (list :fasl-directory "/tmp")))

(defun sly-stumpwm-start ()
  ;; FIXME: set connection params from nix
  (sly-connect "127.0.0.1" 4405)
  (sleep-for 2)
  (when (buffer-live-p (get-buffer "*sly-mrepl for sbcl*"))
    (set-buffer "*sly-mrepl for sbcl*")
    (sly-mrepl--eval-for-repl `(slynk-mrepl:guess-and-set-package "VOD"))))

(defun sly-stumpwm-stop ()
  (sly-disconnect-all)
  (kill-buffer (get-buffer "*sly-mrepl for sbcl*")))
#+end_src

** Nix

#+begin_src emacs-lisp :tangle packages.el
(unpin! nix-mode)
(package! nixpkgs-fmt)
#+end_src

#+begin_src emacs-lisp :tangle config.el
(defun +nix/nix-format-buffer (orig-fun &rest buf)
  "save restore position after formatting"
  (let ((saved-pos (line-number-at-pos)))
    (apply orig-fun buf)
    (forward-line saved-pos)
    (recenter-top-bottom)))

(advice-add 'nix--format-call :around #'+nix/nix-format-buffer)

(use-package! nixpkgs-fmt
  :defer t
  :config
  (setq nix-nixfmt-bin "nixpkgs-fmt")
  :hook (nix-mode . nixpkgs-fmt-on-save-mode))

#+end_src

Also, needs to complete from pkgs and lib and project buffers

** Indent Guides

#+begin_src emacs-lisp :tangle packages.el
(package! highlight-indent-guides)
#+end_src

- I only wish to have it in certain modes:
#+begin_src emacs-lisp :tangle config.el
(use-package! highlight-indent-guides
  :hook ((yaml-mode conf-mode python-mode) . highlight-indent-guides-mode)
  :init
  (setq highlight-indent-guides-method 'character
        highlight-indent-guides-suppress-auto-error t)
  :config
  (defun +indent-guides-init-faces-h (&rest _)
    (when (display-graphic-p)
      (highlight-indent-guides-auto-set-faces)))

  ;; HACK `highlight-indent-guides' calculates its faces from the current theme,
  ;;      but is unable to do so properly in terminal Emacs, where it only has
  ;;      access to 256 colors. So if the user uses a daemon we must wait for
  ;;      the first graphical frame to be available to do.
  (add-hook 'doom-load-theme-hook #'+indent-guides-init-faces-h)
  (when doom-theme
    (+indent-guides-init-faces-h))

  ;; `highlight-indent-guides' breaks when `org-indent-mode' is active
  (add-hook! 'org-mode-local-vars-hook
    (defun +indent-guides-disable-maybe-h ()
      (and highlight-indent-guides-mode
           (bound-and-true-p org-indent-mode)
           (highlight-indent-guides-mode -1)))))

#+end_src

** Magit and friends

#+begin_src emacs-lisp :tangle "config.el"
  (use-package! magit-todos
    :hook (magit-status-mode . magit-todos-mode))
#+end_src

** Rainbow mode

#+begin_src emacs-lisp :tangle "config.el"
(use-package! rainbow-mode
  :hook (prog-mode . rainbow-mode))
#+end_src

** Terminals
#+begin_src emacs-lisp :tangle "packages.el"
(package! multi-vterm)
(package! vtm)
#+end_src

#+begin_src emacs-lisp :tangle "config.el"
(use-package! vterm :bind (:map vterm-mode-map ("s-j" . vterm-copy-mode)))
(use-package! vtm :config (add-to-list 'auto-mode-alist '("\\.vtm\\'" . vtm-mode)))
(use-package! multi-vterm
  :bind
  (:map global-map
   ("C-M-<return>" . multi-vterm)
   ("s-h" . multi-vterm-prev)
   ("s-l" . multi-vterm-next)))
#+end_src

** Poly Mode

- [[https://github.com/ShuguangSun/ess-view-data][ShuguangSun/ess-view-data: View data support for ESS]]

#+begin_src emacs-lisp :tangle "packages.el"
(unpin! polymode)
#+end_src

#+begin_src emacs-lisp :tangle "config.el"
(use-package! polymode
:config
  (add-hook 'org-brain-visualize-mode-hook #'org-brain-polymode))
#+end_src

*** Poly Mode Markdown

#+begin_src emacs-lisp :tangle "packages.el"
(package! poly-markdown :recipe (:build (:not compile)))
#+end_src

#+begin_src emacs-lisp :tangle "config.el"
(use-package! poly-markdown
  :config
  (add-to-list 'auto-mode-alist '("\\.Rmd" . poly-markdown-mode)))
#+end_src

** toc-org
- Is provided by doom org module
#+begin_src emacs-lisp :tangle "packages.el"
;;(unpin! toc-org)
;;(package! toc-org :recipe (:host github
;;                           :repo "snosov1/toc-org"))
#+end_src

#+begin_src emacs-lisp :tangle "config.el"
;;(use-package! toc-org)
#+end_src

** windsize

#+begin_src emacs-lisp :tangle "packages.el"
(package! windsize)
#+end_src

#+begin_src emacs-lisp :tangle "config.el"
  (use-package! windsize
    :bind (("s-p" . windsize-up)
           ("s-n" . windsize-down)
           ("s-b" . windsize-left)
           ("s-f" . windsize-right))
    :custom
    (windsize-cols 1)
    (windsize-rows 1))
#+end_src

** the rest of it

#+begin_src emacs-lisp :tangle "packages.el"

;; (package! beacon
;;           :recipe (:host github
;;                          :repo "Malabarba/beacon"
;;                          :branch "master"))

;; (package! move-text)
;;(package! highlight-indentation)
;;(package! smart-shift)
;; (package! magit-org-todos)
;; (package! eyebrowse)
;;(package! counsel-projectile)

;; (package! restclient)
#+end_src

* Config.el
** TODO Littering and file locations
savehist-file persp workspaces
** RU keymap

#+begin_src emacs-lisp :tangle "config.el"
     (quail-define-package
      "russian-phonetic" "Cyrillic" "[Русский]" nil
      "ЯЖЕРТЫ Phonetic layout"
      nil t t t t nil nil nil nil nil t)

     (quail-define-rules
      ("1" ?1)
      ("2" ?2)
      ("3" ?3)
      ("4" ?4)
      ("5" ?5)
      ("6" ?6)
      ("7" ?7)
      ("8" ?8)
      ("9" ?9)
      ("0" ?0)
      ("-" ?-)
      ("=" ?ь)
      ("`" ?ю)
      ("q" ?я)
      ("w" ?ж)
      ("e" ?е)
      ("r" ?р)
      ("t" ?т)
      ("y" ?ы)
      ("u" ?у)
      ("i" ?и)
      ("o" ?о)
      ("p" ?п)
      ("[" ?ш)
      ("]" ?щ)
      ("a" ?а)
      ("s" ?с)
      ("d" ?д)
      ("f" ?ф)
      ("g" ?г)
      ("h" ?ч)
      ("j" ?й)
      ("k" ?к)
      ("l" ?л)
      (";" ?\;)
      ("'" ?')
      ("\\" ?э)
      ("z" ?з)
      ("x" ?х)
      ("c" ?ц)
      ("v" ?в)
      ("b" ?б)
      ("n" ?н)
      ("m" ?м)
      ("," ?,)
      ("." ?.)
      ("/" ?/)

      ("!" ?!)
      ("@" ?@)
      ("#" ?ё)
      ("$" ?Ё)
      ("%" ?ъ)
      ("^" ?Ъ)
      ("&" ?&)
      ("*" ?*)
      ("(" ?\()
      (")" ?\))
      ("_" ?_)
      ("+" ?Ь)
      ("~" ?Ю)

      ("Q" ?Я)
      ("W" ?Ж)
      ("E" ?Е)
      ("R" ?Р)
      ("T" ?Т)
      ("Y" ?Ы)
      ("U" ?У)
      ("I" ?И)
      ("O" ?О)
      ("P" ?П)
      ("{" ?Ш)
      ("}" ?Щ)
      ("A" ?А)
      ("S" ?С)
      ("D" ?Д)
      ("F" ?Ф)
      ("G" ?Г)
      ("H" ?Ч)
      ("J" ?Й)
      ("K" ?К)
      ("L" ?Л)
      (":" ?:)
      ("\"" ?\")
      ("|" ?Э)
      ("Z" ?З)
      ("X" ?Х)
      ("C" ?Ц)
      ("V" ?В)
      ("B" ?Б)
      ("N" ?Н)
      ("M" ?М)
      ("<" ?<)
      (">" ?>)
      ("?" ??))

     (setq default-input-method "russian-phonetic")
#+end_src

** Theme
#+begin_src emacs-lisp :tangle "packages.el"
(package! solarized-theme)
(package! base16-theme)
(package! color-theme-sanityinc-solarized
  :recipe (:host github :repo "purcell/color-theme-sanityinc-solarized"))
#+end_src

[] #ff8100 is the color of amber old monochrome terminals

#+begin_src emacs-lisp :tangle "config.el"
(setq doom-theme 'solarized-dark)
;; (defun apply-color-theme (frame)
;;   "Apply color theme to a frame based on whether its a 'real'
;;    window or a console window."
;;   (select-frame frame)
;;   (if (window-system frame)
;;       (solarized-dark)
;;     (base16-solarized-dark)))

;; (use-package! color-theme
;;   :config
;;   (setq color-theme-is-global nil)
;;   :hook
;;   (after-make-frame-functions . apply-color-theme))

;; (add-hook 'after-make-frame-functions 'apply-color-theme)

;; (if (not (display-graphic-p))
;;   (setq doom-theme 'base16-solarized-dark)
;;   (setq doom-theme 'solarized-dark))
#+end_src

** Performance

#+begin_src emacs-lisp :tangle "config.el"
(setq gcmh-high-cons-threshold most-positive-fixnum
      max-specpdl-size 100000)
#+end_src

** Everything from the last working here

   #+begin_src emacs-lisp :tangle "config.el"
;; TODO: set uname/email
(set-language-environment "UTF-8")
(set-default-coding-systems 'utf-8)

(setq-default history-length 1000
              x-stretch-cursor t)

(global-visual-line-mode t)

(let* ((env-default-font (font-spec
                          :family (getenv "HM_FONT_NAME")
                          :size (+ (string-to-number (getenv "HM_FONT_SIZE")) 2)
                          :weight 'normal)))
  (setq doom-font env-default-font
        doom-variable-pitch-font env-default-font
        doom-serif-font env-default-font))

(setq
 ;; TODO: user-full-name "John Doe"
 ;; TODO: user-mail-address "john@doe.com"
 calendar-week-start-day 1
 org-src-fontify-natively t
 plantuml-jar-path (getenv "PLANTUML_JAR_PATH")
 org-plantuml-jar-path (getenv "PLANTUML_JAR_PATH")
 comp-async-jobs-number 24
 display-line-numbers-type nil
 create-lockfiles nil
 search-highlight t
 query-replace-highlight t
 require-final-newline t
 dired-dwim-target t
 tab-always-indent 'complete
 company-idle-delay 0.5
 company-minimum-prefix-length 2
 company-transformers nil
 company-show-numbers t)

(add-hook 'dired-mode-hook (lambda () (dired-async-mode 1)))

(map! "M-i" #'windmove-up
      "M-k" #'windmove-down
      "M-j" #'windmove-left
      "M-l" #'windmove-right

      ;; [s-up] #'windmove-up
      ;; [s-down] #'windmove-down
      ;; [s-left] #'windmove-left
      ;; [s-right] #'windmove-right
      "s-=" #'text-scale-increase
      "s--" #'text-scale-decrease
      "s-<return>" #'toggle-frame-fullscreen
      "C-x C-y" #'+default/yank-pop
      "C-x f" #'helm-recentf
      "C-x b" #'helm-projectile-switch-to-buffer
      "s-t" #'+treemacs/toggle
      "M-s-." #'mc/mark-next-like-this
      "M-s-," #'mc/mark-previous-like-this
      "M-s-SPC" #'mc/mark-all-like-this
      "s-SPC" #'set-rectangular-region-anchor
      "C-<escape>" #'+vterm/toggle

      :map prog-mode-map
      :nie "s-." #'helm-semantic-or-imenu
      :nie "s-/" #'comment-or-uncomment-region
      :nie "s-;" #'comment-dwim

      :map helm-find-files-map
      "<left>" #'helm-find-files-up-one-level
      "<right>" #'helm-execute-persistent-action)

(add-hook! 'before-save-hook 'font-lock-flush)

;; i18n

   #+end_src
