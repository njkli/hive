(in-package :vod)

(defun load-menu-file (file-name &key (strip 0))
  (with-open-file (file file-name)
    (when (char= #\# (peek-char nil file)) (read-line file))  ; Hack around the "autogenerated file" comment
    (let* ((*read-eval* nil)
           (list (list (read file))))
      (dotimes (i strip) (setf list (mapcan #'cdr list)))
      (setf *app-menu* (nconc *app-menu* list)))))

(defun commandp (command-name)
  (loop
    :for command :being :the :hash-keys :of stumpwm::*command-hash*
    :when (string= (symbol-name command-name)
                   (symbol-name command ))
      :return command))

(defcommand show-a-menu (menu-structure) ()
  "Show the application menu"
  (labels
      ((pick (options)
         (let ((selection
                 (select-from-menu
                  (current-screen) ; screen
                  options          ; table
                  nil              ; prompt
                  0                ; initial-selection
                  )))
           (cond
             ((null selection)
              nil)
             ((stringp (second selection))
              (run-shell-command (second selection)))
             ((and (symbolp (second selection))
                   (commandp (second selection)))
              (funcall (second selection)))
             (t
              (if (equalp ".." (first selection))
                  (pick (second selection))
                  (pick (append (list (list ".." options))
                                (cdr selection)))))))))
    (pick menu-structure)))

#||
(print '("s"))
;; TODO: replace rofi-drun with own version

(defun desktop-entries-in (xdg-data-dir)
  (directory (make-pathname :directory `(,@(pathname-directory xdg-data-dir)
                                           :wild-inferiors)
                            :name :wild
                            :type "desktop")))

(defun desktop-entries ()
  )

;; (let* ((dirs  (ppcre:split ":" (getenv "XDG_DATA_DIRS")))
;;        (desktop-files (mapcar #'(lambda (d-entry-fn) (desktop-entries-in d-entry-fn))
;;                             dirs)))
;;   (describe desktop-files)
;;   )

  (describe (car dirs)))

(setf dirs (ppcre:split ":" (getenv "XDG_DATA_DIRS"))   )
(namestring (car dirs))

(directory (make-pathname :directory `(,@(pathname-directory "/nix/store/f587qlsmhiga2j5k0qxp7hxmkcs8a7fi-tilix-1.8.3/share")
                                         :wild-inferiors)
                          :name :wild
                          :type "desktop"))

(car (desktop-entries-in "/nix/store/f587qlsmhiga2j5k0qxp7hxmkcs8a7fi-tilix-1.8.3/share") )

(dolist (fn (ppcre:split ":" (getenv "XDG_DATA_DIRS"))  )
 (print (desktop-entries-in fn)))

||#
